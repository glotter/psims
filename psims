#!/bin/bash
#
# Usage: swiftopt.sh [-s sitename] [-p paramfile] [-g gridlist] 

# crash: Report a problem and exit
crash()
{
    echo "$@" >&2
    exit 1
}

# Find absolute path
abspath()
{
   readlink -f $1
}

# Process command line arguments
while [ $# -gt 0 ]; do
  case $1 in
    -g) gridlist=$2; shift 2;;
    -p) paramfile=$2; shift 2;;
    -s) site=$2; shift 2;;
    -t) test_result=$2; shift 2;;
    *) crash "Usage: $0 [-s sitename] [-p paramfile] [-g gridlist] [ -t test_result ]";;
  esac
done

if [ ! -f "conf/$site.xml" ]; then
   crash "Unable to find configuration file conf/$site.xml"
fi

if [ -n "$test_result" ]; then
   if [ ! -d "$test_result" ]; then
      crash "Unable to find test result directory $test_result"
   fi
fi

# Create next unique run id and run directory
export rundir=$( abspath $( echo run??? | sed -e 's/^.*run//' | awk '{ printf("run%03d\n", $1+1)}' ))
mkdir $rundir || crash "Unable to create run directory"
workdir=$rundir

# Set parameters
if [ ! -f $paramfile ]; then
   crash "Could not find parameter file $paramfile in params!"
fi

sed -e '/^[[:space:]]*\(#.*\)*$/d' -e 's/#.*//' -e 's/  */=/' -e 's/^/export /' $paramfile > $rundir/params.psims
source $rundir/params.psims

export PATH=$PWD/bin:$PWD/tapps/pdssat:$PWD/tapps/papsim:$PATH

# Check for work_directory location
if [ -n "$work_directory" ]; then
   workdir="$( abspath $work_directory )/$( basename $rundir )"
   if [ -d "$workdir" ]; then
      crash "Work directory $workdir already exists"
   fi
   mkdir -p $workdir
   cp $rundir/params.psims $workdir
fi

# Copy required files to the work_directory
cp $campaign/*.nc4 $workdir/
cp $gridlist $workdir/gridList.txt
cp RunpSIMS.swift $workdir
cp combine.swift $workdir
cp bin/RunpSIMS.sh $workdir
cp conf/swift.properties $workdir
cp conf/$site.xml $workdir/sites.xml
cp conf/$site.cf $workdir/cf
cp $paramfile $workdir/paramfile
chmod a+rw $workdir/*

cd $workdir
source params.psims

# Record arguments in ABOUT file
cat << EOF > ABOUT
Site $site
Parameter file $( abspath $paramfile )
Gridlist $( abspath $gridlist )
Run directory $rundir
Work directory $workdir
EOF

# Echo parameters
cat ABOUT
echo -e "\nParameters:"
cat $workdir/params.psims
echo

# Extract input_tars
if [ -n "$tar_inputs" ]; then
   echo "Setting up data..."
   tar_files=$( echo $tar_inputs | sed s/,/' '/g )
   for file in $tar_files; do
      echo "Extracting $file"
      tar xvf $file 2>&1 | while read line; do
         x=$((x+1))
         echo -en "$x files extracted\r"
      done
   done
fi

# Do the run
for param in $( awk '{print $1}' paramfile )
do
   arguments="$arguments -$param=${!param}"
done

export SWIFT_HEAP_MAX=5120M
export SWIFT_USERHOME=$PWD

echo "swift -sites.file sites.xml -tc.file tc.data -config cf -resume *.rlog RunpSIMS.swift $arguments -workdir=$workdir 2>&1 | tee -a swift.out" > restart.sh
chmod +x restart.sh

gensites -p cf $rundir/../conf/$site.xml > sites.xml
echo Generating part files...
swift -sites.file sites.xml -tc.file tc.data -config cf RunpSIMS.swift $arguments -workdir=$workdir 2>&1 | tee swift.out
echo -e "Done\n"

echo Post processing...
swift -sites.file sites.xml -tc.file tc.data -config cf combine.swift $arguments -workdir=$workdir 2>&1 | tee -a swift.out
echo -e "Done\n"

echo Generating plot...
$rundir/../bin/activityplot.pl RunpSIMS-2*.log &> /dev/null
echo -e "Done\n"

if [ -n "$test_result" ]; then
   echo Comparing results to test data at $test_result
   $rundir/../bin/cmp_output.py $rundir $test_result
   if [ "$?" == "0" ]; then
      echo "Test passed"
   else
      echo "Test failed"
   fi
fi

# Move data back to original run directory
if [ "$rundir" != "$workdir" ]; then
   echo Cleaning up data in $workdir...
   echo rm -rf $workdir/data
   echo Moving data from $workdir to $rundir...
   echo mv $workdir/* $rundir/
   echo rm -r $workdir
   echo Done
fi
